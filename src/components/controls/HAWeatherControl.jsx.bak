import React, { useState } from 'react';
import { 
    Cloud, 
    Sun, 
    CloudRain, 
    CloudSnow, 
    Wind, 
    Droplets,
    Gauge,
    Eye,
    Compass,
    RefreshCw
} from 'lucide-react';
import ControlWrapper from './ControlWrapper.jsx';

export const HAWeatherControl = ({ device, client, isUpdating, publishMessage }) => {
    const { state } = device;
    const [isRefreshing, setIsRefreshing] = useState(false);
    
    const getWeatherIcon = (condition) => {
        const iconClass = "w-12 h-12 md:w-16 md:h-16 drop-shadow-2xl";
        switch (condition?.toLowerCase()) {
            case 'sunny':
            case 'clear':
                return <Sun className={`${iconClass} text-yellow-400 drop-shadow-[0_0_10px_rgba(250,204,21,0.5)]`} />;
            case 'cloudy':
            case 'overcast':
            case 'partly-cloudy':
                return <Cloud className={`${iconClass} text-gray-300 drop-shadow-[0_0_10px_rgba(209,213,219,0.3)]`} />;
            case 'rainy':
            case 'rain':
            case 'showers':
                return <CloudRain className={`${iconClass} text-blue-400 drop-shadow-[0_0_10px_rgba(96,165,250,0.5)]`} />;
            case 'snowy':
            case 'snow':
                return <CloudSnow className={`${iconClass} text-cyan-300 drop-shadow-[0_0_10px_rgba(103,232,249,0.5)]`} />;
            default:
                return <Cloud className={`${iconClass} text-gray-400 drop-shadow-lg`} />;
        }
    };
    const formatTemperature = (temp) => {
        if (temp === undefined || temp === null) return '--';
        return `${Math.round(temp)}${state.temperatureUnit || 'Â°C'}`;
    };

    const formatPressure = (pressure) => {
        if (pressure === undefined || pressure === null) return '--';
        return `${Math.round(pressure)} ${state.pressureUnit || 'hPa'}`;
    };

    const formatWindSpeed = (speed) => {
        if (speed === undefined || speed === null) return '--';
        return `${Math.round(speed)} ${state.windSpeedUnit || 'km/h'}`;
    };

    const getWindDirection = (bearing) => {
        if (bearing === undefined || bearing === null) return 'N/A';
        const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
        const index = Math.round(bearing / 22.5) % 16;
        return directions[index];
    };

    const handleRefresh = async () => {
        if (!client || isUpdating) return;
        
        setIsRefreshing(true);
        try {
            const topic = `${device.moduleId}/device/${device.id}/input/command`;
            await publishMessage(topic, {
                command: 'refresh',
                parameters: {}
            });
        } catch (error) {
            console.error('Failed to refresh weather data:', error);
        } finally {
            setTimeout(() => setIsRefreshing(false), 1000);
        }
    };
    const getConditionColor = (condition) => {
        switch (condition?.toLowerCase()) {
            case 'sunny':
            case 'clear':
                return 'text-yellow-400';
            case 'cloudy':
            case 'overcast':
                return 'text-gray-300';
            case 'rainy':
            case 'rain':
                return 'text-blue-400';
            case 'snowy':
            case 'snow':
                return 'text-cyan-300';
            default:
                return 'text-gray-300';
        }
    };

    const getWeatherGradient = (condition) => {
        switch (condition?.toLowerCase()) {
            case 'sunny':
            case 'clear':
                return 'from-yellow-500/20 via-orange-500/20 to-yellow-500/20';
            case 'cloudy':
            case 'overcast':
            case 'partly-cloudy':
                return 'from-gray-600/20 via-slate-600/20 to-gray-600/20';
            case 'rainy':
            case 'rain':
            case 'showers':
                return 'from-blue-500/20 via-sky-500/20 to-blue-500/20';
            case 'snowy':
            case 'snow':
                return 'from-blue-400/20 via-indigo-400/20 to-slate-400/20';
            default:
                return 'from-gray-600/20 via-slate-600/20 to-gray-600/20';
        }
    };

    return (
        <ControlWrapper>
            {/* Single Weather Card - Dark Theme */}
            <div className={`relative bg-gradient-to-br ${getWeatherGradient(state.condition)} bg-gray-900/90 rounded-2xl p-4 shadow-xl border border-white/20 backdrop-blur-sm`}>
                
                {/* Header Section */}
                <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-3">
                        <div className="flex-shrink-0">
                            {getWeatherIcon(state.condition)}
                        </div>                        <div className="flex flex-col">
                            <div className="text-2xl md:text-3xl font-bold text-white leading-none drop-shadow-lg">
                                {formatTemperature(state.temperature)}
                            </div>
                            <div className={`text-md font-medium capitalize ${getConditionColor(state.condition)} mt-1 drop-shadow-md`}>
                                {state.condition || 'Unknown'}
                            </div>
                        </div>
                    </div>
                    
                    <button
                        onClick={handleRefresh}
                        disabled={isUpdating || !client || isRefreshing}
                        className="p-2 rounded-lg bg-white/10 hover:bg-white/20 text-white hover:text-cyan-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-cyan-500/20 backdrop-blur-sm border border-white/20"
                        title="Refresh Weather Data"
                    >
                        <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />
                    </button>
                </div>
                {/* Weather Data - Single Cards Per Row */}
                <div className="space-y-3 mb-4">
                    {/* Humidity */}
                    <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-cyan-500/30 shadow-lg hover:shadow-cyan-500/20 hover:border-cyan-400/50 transition-all duration-200">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-cyan-500/20 rounded-lg shadow-lg">
                                <Droplets className="w-5 h-5 text-cyan-400 drop-shadow-lg" />
                            </div>
                            <div className="min-w-0 flex-1">
                                <div className="text-xs font-medium text-cyan-400 uppercase tracking-wide">
                                    Humidity
                                </div>
                                <div className="text-lg font-bold text-white drop-shadow-md">
                                    {state.humidity !== undefined ? `${Math.round(state.humidity)}%` : '--'}
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Pressure */}
                    <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-purple-500/30 shadow-lg hover:shadow-purple-500/20 hover:border-purple-400/50 transition-all duration-200">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-purple-500/20 rounded-lg shadow-lg">
                                <Gauge className="w-5 h-5 text-purple-400 drop-shadow-lg" />
                            </div>
                            <div className="min-w-0 flex-1">
                                <div className="text-xs font-medium text-purple-400 uppercase tracking-wide">
                                    Pressure
                                </div>
                                <div className="text-lg font-bold text-white drop-shadow-md">
                                    {formatPressure(state.pressure)}
                                </div>
                            </div>
                        </div>
                    </div>
                    {/* Wind Speed */}
                    <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-green-500/30 shadow-lg hover:shadow-green-500/20 hover:border-green-400/50 transition-all duration-200">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-green-500/20 rounded-lg shadow-lg">
                                <Wind className="w-5 h-5 text-green-400 drop-shadow-lg" />
                            </div>
                            <div className="min-w-0 flex-1">
                                <div className="text-xs font-medium text-green-400 uppercase tracking-wide">
                                    Wind Speed
                                </div>
                                <div className="text-lg font-bold text-white drop-shadow-md">
                                    {formatWindSpeed(state.windSpeed)}
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Wind Direction */}
                    <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-pink-500/30 shadow-lg hover:shadow-pink-500/20 hover:border-pink-400/50 transition-all duration-200">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-pink-500/20 rounded-lg shadow-lg">
                                <Compass className="w-5 h-5 text-pink-400 drop-shadow-lg" />
                            </div>
                            <div className="min-w-0 flex-1">
                                <div className="text-xs font-medium text-pink-400 uppercase tracking-wide">
                                    Wind Direction
                                </div>
                                <div className="text-lg font-bold text-white drop-shadow-md">
                                    {getWindDirection(state.windBearing)}
                                </div>
                            </div>
                        </div>
                    </div>
                    {/* Additional Data - Visibility */}
                    {state.visibility !== undefined && (
                        <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-indigo-500/30 shadow-lg hover:shadow-indigo-500/20 hover:border-indigo-400/50 transition-all duration-200">
                            <div className="flex items-center space-x-3">
                                <div className="p-2 bg-indigo-500/20 rounded-lg shadow-lg">
                                    <Eye className="w-5 h-5 text-indigo-400 drop-shadow-lg" />
                                </div>
                                <div className="min-w-0 flex-1">
                                    <div className="text-xs font-medium text-indigo-400 uppercase tracking-wide">
                                        Visibility
                                    </div>
                                    <div className="text-lg font-bold text-white drop-shadow-md">
                                        {Math.round(state.visibility)} km
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {/* Additional Data - Precipitation */}
                    {state.precipitation !== undefined && (
                        <div className="bg-gray-800/60 backdrop-blur-sm rounded-lg p-3 border border-blue-500/30 shadow-lg hover:shadow-blue-500/20 hover:border-blue-400/50 transition-all duration-200">
                            <div className="flex items-center space-x-3">
                                <div className="p-2 bg-blue-500/20 rounded-lg shadow-lg">
                                    <CloudRain className="w-5 h-5 text-blue-400 drop-shadow-lg" />
                                </div>
                                <div className="min-w-0 flex-1">
                                    <div className="text-xs font-medium text-blue-400 uppercase tracking-wide">
                                        Precipitation
                                    </div>
                                    <div className="text-lg font-bold text-white drop-shadow-md">
                                        {state.precipitation} mm
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
                {/* Footer */}
                <div className="flex flex-col space-y-2 pt-3 border-t border-white/20">
                    {state.attribution && (
                        <div className="text-xs text-gray-400 text-center font-medium">
                            Data: {state.attribution}
                        </div>
                    )}
                    <div className="flex items-center justify-between text-xs text-gray-400">
                        <span className="flex items-center space-x-1">
                            <div className={`w-2 h-2 rounded-full ${client ? 'bg-green-400 shadow-lg shadow-green-400/50' : 'bg-red-400 shadow-lg shadow-red-400/50'}`}></div>
                            <span>{client ? 'Connected' : 'Disconnected'}</span>
                        </span>
                        <span>
                            Updated: {state.lastUpdate ? new Date(state.lastUpdate).toLocaleString() : 'Never'}
                        </span>
                    </div>
                </div>
            </div>
        </ControlWrapper>
    );
};